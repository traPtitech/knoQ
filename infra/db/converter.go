// Code generated by gotypeconverter; DO NOT EDIT.
package db

import (
	"time"

	"github.com/gofrs/uuid"
	"github.com/traPtitech/knoQ/domain"
	"gorm.io/gorm"
)

func ConvCreateRoomParamsToRoom(src CreateRoomParams) (dst Room) {
	dst.Verified = src.Verified
	dst.CreatedByRefer = src.CreatedBy
	dst.Place = src.WriteRoomParams.Place
	dst.TimeStart = src.WriteRoomParams.TimeStart
	dst.TimeEnd = src.WriteRoomParams.TimeEnd
	dst.Admins = make([]RoomAdmin, len(src.WriteRoomParams.Admins))
	for i := range src.WriteRoomParams.Admins {
		dst.Admins[i] = ConvuuidUUIDToRoomAdmin(src.WriteRoomParams.Admins[i])
	}
	return
}
func ConvEventAdminToRoomAdmin(src EventAdmin) (dst RoomAdmin) {
	dst.UserID = src.UserID
	return
}

func ConvEventAdminTodomainUser(src EventAdmin) (dst domain.User) {
	dst.ID = src.UserID
	return
}

func ConvEventAttendeeTodomainAttendee(src EventAttendee) (dst domain.Attendee) {
	dst.UserID = src.UserID
	dst.Schedule = domain.ScheduleStatus(src.Schedule)
	return
}
// fixed
func ConvEventRoomTodomainEvent(src EventRoom) (dst domain.Event) {
	// dst.Model.CreatedAt = src.Model.CreatedAt
	// dst.Model.UpdatedAt = src.Model.UpdatedAt
	// dst.Model.DeletedAt = new(time.Time)
	// (*dst.Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	// dst.Rooms = make([]domain.Room, 1)
	// dst.Rooms[0].Model.CreatedAt = src.Model.CreatedAt
	// dst.Rooms[0].Model.UpdatedAt = src.Model.UpdatedAt
	// dst.Rooms[0].Model.DeletedAt = new(time.Time)
	// (*dst.Rooms[0].Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	dst = ConvEventTodomainEvent(src.Event)
	return
}
// fixed
func ConvEventRoomTodomainRoom(src EventRoom) (dst domain.Room) {
	dst = ConvRoomTodomainRoom(src.Room)
	// dst.Model.CreatedAt = src.Model.CreatedAt
	// dst.Model.UpdatedAt = src.Model.UpdatedAt
	// dst.Model.DeletedAt = new(time.Time)
	// (*dst.Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	// dst.AllowTogether = src.Model.DeletedAt.Valid
	return
}

func ConvEventTagTodomainEventTag(src EventTag) (dst domain.EventTag) {
	dst.Tag = ConvTagTodomainTag(src.Tag)
	dst.Locked = src.Locked
	return
}
func ConvEventTodomainEvent(src Event) (dst domain.Event) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Description = src.Description
	// fixed
	dst.Rooms = make([]domain.EventRoom, len(src.Rooms))
	for i := range src.Rooms {
		dst.Rooms[i] = ConvEventRoomTodomainEventRoom(src.Rooms[i])
	}
	//
	dst.Group = ConvGroupTodomainGroup(src.Group)
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	dst.CreatedBy = ConvUserTodomainUser(src.CreatedBy)
	dst.Admins = make([]domain.User, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvEventAdminTodomainUser(src.Admins[i])
	}
	dst.Tags = make([]domain.EventTag, len(src.Tags))
	for i := range src.Tags {
		dst.Tags[i] = ConvEventTagTodomainEventTag(src.Tags[i])
	}
	dst.Attendees = make([]domain.Attendee, len(src.Attendees))
	for i := range src.Attendees {
		dst.Attendees[i] = ConvEventAttendeeTodomainAttendee(src.Attendees[i])
	}
	dst.Open = src.Open
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}
// fixed
func ConvEventRoomTodomainEventRoom(src EventRoom) (dst domain.EventRoom) {
	dst.AllowTogether = src.AllowTogether
	dst.Room = ConvRoomTodomainRoom(src.Room)
	return
}
//

func ConvGroupAdminTodomainUser(src GroupAdmin) (dst domain.User) {
	dst.ID = src.UserID
	return
}
func ConvGroupMemberTodomainUser(src GroupMember) (dst domain.User) {
	dst.ID = src.UserID
	return
}
func ConvGroupTodomainGroup(src Group) (dst domain.Group) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Description = src.Description
	dst.JoinFreely = src.JoinFreely
	dst.Members = make([]domain.User, len(src.Members))
	for i := range src.Members {
		dst.Members[i] = ConvGroupMemberTodomainUser(src.Members[i])
	}
	dst.Admins = make([]domain.User, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvGroupAdminTodomainUser(src.Admins[i])
	}
	dst.CreatedBy = ConvUserTodomainUser(src.CreatedBy)
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}
func ConvRoomAdminTodomainUser(src RoomAdmin) (dst domain.User) {
	dst.ID = src.UserID
	return
}
func ConvRoomTodomainRoom(src Room) (dst domain.Room) {
	dst.ID = src.ID
	dst.Place = src.Place
	dst.Verified = src.Verified
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	//fixed
	dst.Events = make([]domain.RoomEvent, len(src.Events))
	for i := range src.Events {
		dst.Events[i] = ConvEventRoomTodomainRoomEvent(src.Events[i])
	}
	//
	dst.Admins = make([]domain.User, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvRoomAdminTodomainUser(src.Admins[i])
	}
	dst.CreatedBy = ConvUserTodomainUser(src.CreatedBy)
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}
// fixed
func ConvEventRoomTodomainRoomEvent(src EventRoom) (dst domain.RoomEvent) {
	dst.AllowTogether = src.AllowTogether
	dst.Event = ConvEventTodomainEvent(src.Event)
	return
}
//
func ConvSEventAdminToSRoomAdmin(src []EventAdmin) (dst []RoomAdmin) {
	dst = make([]RoomAdmin, len(src))
	for i := range src {
		dst[i] = ConvEventAdminToRoomAdmin(src[i])
	}
	return
}

func ConvSPEventToSPdomainEvent(src []*Event) (dst []*domain.Event) {
	dst = make([]*domain.Event, len(src))
	for i := range src {
		if src[i] != nil {
			dst[i] = new(domain.Event)
			(*dst[i]) = ConvEventTodomainEvent((*src[i]))
		}
	}
	return
}
func ConvSPGroupMemberToSuuidUUID(src []*GroupMember) (dst []uuid.UUID) {
	dst = make([]uuid.UUID, len(src))
	for i := range src {
		if src[i] != nil {
			dst[i] = (*src[i]).GroupID
		}
	}
	return
}

func ConvSPGroupToSPdomainGroup(src []*Group) (dst []*domain.Group) {
	dst = make([]*domain.Group, len(src))
	for i := range src {
		if src[i] != nil {
			dst[i] = new(domain.Group)
			(*dst[i]) = ConvGroupTodomainGroup((*src[i]))
		}
	}
	return
}
func ConvSPRoomToSPdomainRoom(src []*Room) (dst []*domain.Room) {
	dst = make([]*domain.Room, len(src))
	for i := range src {
		if src[i] != nil {
			dst[i] = new(domain.Room)
			(*dst[i]) = ConvRoomTodomainRoom((*src[i]))
		}
	}
	return
}

func ConvSPTagToSPdomainTag(src []*Tag) (dst []*domain.Tag) {
	dst = make([]*domain.Tag, len(src))
	for i := range src {
		if src[i] != nil {
			dst[i] = new(domain.Tag)
			(*dst[i]) = ConvTagTodomainTag((*src[i]))
		}
	}
	return
}
func ConvTagTodomainEventTag(src Tag) (dst domain.EventTag) {
	dst.Tag.ID = src.ID
	dst.Tag.Name = src.Name
	return
}

func ConvTagTodomainTag(src Tag) (dst domain.Tag) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}
func ConvUpdateRoomParamsToRoom(src UpdateRoomParams) (dst Room) {
	dst.CreatedByRefer = src.CreatedBy
	dst.Place = src.WriteRoomParams.Place
	dst.TimeStart = src.WriteRoomParams.TimeStart
	dst.TimeEnd = src.WriteRoomParams.TimeEnd
	dst.Admins = make([]RoomAdmin, len(src.WriteRoomParams.Admins))
	for i := range src.WriteRoomParams.Admins {
		dst.Admins[i] = ConvuuidUUIDToRoomAdmin(src.WriteRoomParams.Admins[i])
	}
	return
}
func ConvUserMetaTodomainUser(src User) (dst domain.User) {
	dst.ID = src.ID
	return
}

func ConvUserTodomainUser(src User) (dst domain.User) {
	dst.ID = src.ID
	dst.State = src.State
	return
}
func ConvWriteEventParamsToEvent(src WriteEventParams) (dst Event) {
	dst.CreatedByRefer = src.CreatedBy
	dst.Name = src.WriteEventParams.Name
	dst.Description = src.WriteEventParams.Description
	dst.GroupID = src.WriteEventParams.GroupID
	dst.TimeStart = src.WriteEventParams.TimeStart
	dst.TimeEnd = src.WriteEventParams.TimeEnd
	// fixed
	dst.Rooms = make([]EventRoom, len(src.WriteEventParams.Rooms))
	for i := range src.WriteEventParams.Rooms {
		dst.Rooms[i] = ConvdomainEventRoomParamsToEventRoom(src.WriteEventParams.Rooms[i])
	}
	//
	dst.Admins = make([]EventAdmin, len(src.WriteEventParams.Admins))
	for i := range src.WriteEventParams.Admins {
		dst.Admins[i] = ConvuuidUUIDToEventAdmin(src.WriteEventParams.Admins[i])
	}
	dst.Tags = make([]EventTag, len(src.WriteEventParams.Tags))
	for i := range src.WriteEventParams.Tags {
		dst.Tags[i] = ConvdomainEventTagParamsToEventTag(src.WriteEventParams.Tags[i])
	}
	dst.Open = src.WriteEventParams.Open
	return
}
func ConvWriteGroupParamsToGroup(src WriteGroupParams) (dst Group) {
	dst.CreatedByRefer = src.CreatedBy
	dst.Name = src.WriteGroupParams.Name
	dst.Description = src.WriteGroupParams.Description
	dst.JoinFreely = src.WriteGroupParams.JoinFreely
	dst.Members = make([]GroupMember, len(src.WriteGroupParams.Members))
	for i := range src.WriteGroupParams.Members {
		dst.Members[i] = ConvuuidUUIDToGroupMember(src.WriteGroupParams.Members[i])
	}
	dst.Admins = make([]GroupAdmin, len(src.WriteGroupParams.Admins))
	for i := range src.WriteGroupParams.Admins {
		dst.Admins[i] = ConvuuidUUIDToGroupAdmin(src.WriteGroupParams.Admins[i])
	}
	return
}

func ConvdomainEventRoomParamsToEventRoom(src domain.EventRoomParams) (dst EventRoom) {
	// TODO: RoomIDこれでいいんか
	dst.RoomID = src.RoomID
	dst.Room.ID = src.RoomID
	dst.Room.Place = src.Place
	dst.AllowTogether = src.AllowTogether
	return
}
// fixed
// func ConvdomainEventRoomParamsToRoom(src domain.EventRoomParams) (dst Room) {
// 	dst.ID = src.RoomID
// 	dst.Place = src.Place
// 	dst.AllowTogether = src.AllowTogether
// 	return
// }

func ConvdomainEventTagParamsToEventTag(src domain.EventTagParams) (dst EventTag) {
	dst.Tag.Name = src.Name
	dst.Locked = src.Locked
	return
}

func ConvgormDeletedAtTotimeTime(src gorm.DeletedAt) (dst time.Time) {
	dst = src.Time
	return
}
func ConvuuidUUIDToEventAdmin(src uuid.UUID) (dst EventAdmin) {
	dst.UserID = src
	return
}
func ConvuuidUUIDToGroupAdmin(src uuid.UUID) (dst GroupAdmin) {
	dst.UserID = src
	return
}
func ConvuuidUUIDToGroupAdmins(src uuid.UUID) (dst GroupAdmin) {
	dst.UserID = src
	return
}

func ConvuuidUUIDToGroupMember(src uuid.UUID) (dst GroupMember) {
	dst.UserID = src
	return
}
func ConvuuidUUIDToRoomAdmin(src uuid.UUID) (dst RoomAdmin) {
	dst.UserID = src
	return
}
func ConvuuidUUIDToUserMeta(src uuid.UUID) (dst User) {
	dst.ID = src
	return
}
